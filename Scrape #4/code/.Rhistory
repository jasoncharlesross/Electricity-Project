treatment_assignment <- rep(0,total)
for (j in 1:choose) {
treatment_assignment[treated_indexes[j]] <- 1
}
permutations[i,] <- treatment_assignment
}
permutations
}
# creates imputed outcomes table according to treatment assignments, tau
impute < function (true_potential_outcomes, treatment_status, tau) {
imputed_outcomes <- matrix(ncol = 2, nrow = length(treatment_status))
for (i in 1:length(treatment_status)) {
if (treatment_status[i] == 1) {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2] - tau,
true_potential_outcomes[i,2])
}
else {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2],
true_potential_outcomes[i,2] + tau)
}
}
imputed_outcomes
}
library(dplyr)
library(tidyverse)
# ----- backend function definitions -----
# returns all permutations of binary treatment vector
true_permute <- function(n=5,m=3) t(combn(n,m,tabulate,nbins=n))
# returns a sample (with replacement) of permutations of binary treatment vector
sample_permute <- function(total, choose, num_samples) {
permutations <- matrix(nrow = num_samples, ncol = total)
for (i in 1:num_samples) {
treated_indexes <- sample.int(total, choose)
treatment_assignment <- rep(0,total)
for (j in 1:choose) {
treatment_assignment[treated_indexes[j]] <- 1
}
permutations[i,] <- treatment_assignment
}
permutations
}
# creates imputed outcomes table according to treatment assignments, tau
impute < function (true_potential_outcomes, treatment_status, tau) {
imputed_outcomes <- matrix(ncol = 2, nrow = length(treatment_status))
for (i in 1:length(treatment_status)) {
if (treatment_status[i] == 1) {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2] - tau,
true_potential_outcomes[i,2])
}
else {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2],
true_potential_outcomes[i,2] + tau)
}
}
imputed_outcomes
}
impute < function (true_potential_outcomes, treatment_status, tau) {
imputed_outcomes <- matrix(ncol = 2, nrow = length(treatment_status))
for (i in 1:length(treatment_status)) {
if (treatment_status[i] == 1) {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2] - tau,
true_potential_outcomes[i,2])
}
else {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2],
true_potential_outcomes[i,2] + tau)
}
}
imputed_outcomes
}
impute < function (true_potential_outcomes, treatment_status, tau) {
imputed_outcomes <- matrix(ncol = 2, nrow = length(treatment_status))
for (i in 1:length(treatment_status)) {
if (treatment_status[i] == 1) {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2] - tau,
true_potential_outcomes[i,2])
}
else {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2],
true_potential_outcomes[i,2] + tau)
}
}
imputed_outcomes
}
impute < function (true_potential_outcomes, treatment_status, tau) {
imputed_outcomes <- matrix(ncol = 2, nrow = length(treatment_status))
for (i in 1:length(treatment_status)) {
if (treatment_status[i] == 1) {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2] - tau,
true_potential_outcomes[i,2])
}
else {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2],
true_potential_outcomes[i,2] + tau)
}
}
imputed_outcomes
}
impute < function (true_potential_outcomes, treatment_status, tau) {
imputed_outcomes <- matrix(ncol = 2, nrow = length(treatment_status))
for (i in 1:length(treatment_status)) {
if (treatment_status[i] == 1) {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2] - tau,
true_potential_outcomes[i,2])
}
else {
imputed_outcomes[i,] <- c(true_potential_outcomes[i,2],
true_potential_outcomes[i,2] + tau)
}
}
imputed_outcomes
}
sample1 <- c(rnorm(35, 4), rnorm(20, 2))
treat1 <- c(rep(1,times = 35), rep(0,times = 20))
out <- f_int(sample1, treat1, -2, 8, 0.2, diff, tolerance = 300)
library(dplyr)
library(tidyverse)
# returns all permutations of binary treatment vector
true_permute <- function(n=5,m=3) t(combn(n,m,tabulate,nbins=n))
# returns a sample (with replacement) of permutations of bianry treatment vector
sample_permute <- function(total, choose, num_samples) {
permutations <- matrix(nrow = num_samples, ncol = total)
for (i in 1:num_samples) {
treated_indexes <- sample.int(total, choose)
treatment_assignment <- rep(0,total)
for (j in 1:choose) {
treatment_assignment[treated_indexes[j]] <- 1
}
permutations[i,] <- treatment_assignment
}
permutations
}
# finds population ATE given Nx2 matrix of potential outcomes
population_ate <- function(sample) {
(sum(sample[,2]) - sum(sample[,1])) / length(sample[,1])
}
# diff test statistic
diff <- function(sample, treatment_status) {
treated_obs <- c()
control_obs <- c()
for (i in 1:length(treatment_status)) {
if (treatment_status[i] == 1) {
treated_obs <- c(treated_obs, sample[i,1])
} else {
control_obs <- c(control_obs, sample[i,1])
}
}
abs(mean(treated_obs) - mean(control_obs))
}
# t-stat test statistic
t_stat <- function(sample, treatment_status) {
treated_outcomes <- c()
control_outcomes <- c()
len <- length(treatment_status)
for (i in 1:len) {
if (treatment_status[i] == 1) {
treated_outcomes <- c(treated_outcomes, sample[i,1])
} else {
control_outcomes <- c(control_outcomes, sample[i,1])
}
}
abs((mean(treated_outcomes) - mean(control_outcomes)) /
sqrt(var(treated_outcomes)/length(treated_outcomes) +
var(control_outcomes)/length(control_outcomes)))
}
# rank test statistic
rank_test <- function(sample, treatment_status) {
len = length(treatment_status)
ordered_obs <- as.data.frame(matrix(c(treatment_status, sample[,1]),
byrow = FALSE, ncol = 2))
colnames(ordered_obs) <- c("status", "outcome")
ordered_obs <- ordered_obs[order(ordered_obs[,2]),]
ordered_obs$rank <- 1:len
tie <- FALSE
# adjust ranks for tied outcomes
i <- 1
while (i <= len) {
if ((i != len) && (ordered_obs$outcome[i] == ordered_obs$outcome[i+1])) {
tie <- TRUE
tie_counter <- 2
j <- i + 1
}
while (tie == TRUE) {
if ((j != len) && (ordered_obs$outcome[j] == ordered_obs$outcome[j+1])) {
tie_counter <- tie_counter + 1
j <- j + 1
} else {
for (k in 0:(tie_counter-1)) {
ordered_obs$rank[j-k] <- 0.5 * (j + i)
}
tie <- FALSE
i <- j
next
}
}
i <- i + 1
}
treated_ranks <- c()
control_ranks <- c()
for (i in 1:len) {
if (ordered_obs$status[i] == 1) {
treated_ranks <- c(treated_ranks, ordered_obs$rank[i])
} else {
control_ranks <- c(control_ranks, ordered_obs$rank[i])
}
}
abs(mean(treated_ranks) - mean(control_ranks))
}
# Kolmogorov-Smirnov test statistic
kolmogorov <- function(sample, treatment_status) {
len = length(treatment_status)
table <- as.data.frame(matrix(c(treatment_status, sample[,1]),
byrow = FALSE, ncol = 2))
colnames(table) <- c("status", "outcome")
table <- table[order(table[,2]),]
max <- 0
num_treat <- sum(treatment_status)
num_control <- len - num_treat
cdf_treat <- 0
cdf_control <- 0
diffs <- c()
for (i in 1:len) {
# increment cdf counter
if (table$status[i] == 1) {
cdf_treat <- cdf_treat + 1
} else {
cdf_control <- cdf_control + 1
}
# make sure to iterate to last appearance of tied outcome
if (i != len && table$outcome[i] == table$outcome[i+1]) {
next
}
# check difference in cdfs, compare against current max
diff <- abs(cdf_treat/num_treat - cdf_control/num_control)
if (diff > max) {
max <- diff
}
}
max
}
# given Nx1 sample vector, Nx1 treatment assignment vector, and hypothesized
# treatment effect tau, generates potential outcome matrix
impute <- function(sample, treatment_status, tau) {
potential_outcomes <- matrix(nrow = length(treatment_status), ncol = 2)
for (i in 1:length(treatment_status)) {
if (treatment_status[i] == 1) {
potential_outcomes[i,] <- c(sample[i] - tau, sample[i])
} else {
potential_outcomes[i,] <- c(sample[i], sample[i] + tau)
}
}
potential_outcomes
}
# given a vector of length N of outcomes, and vector of length N containing
# the treatment assignment, a hypothesized constant treatment effect, and a test
# statistic, computes the p value the given assignment vector
fisher_impute <- function(sample, treatment_status, test, tau, num_perm = 300) {
if (choose(length(treatment_status), sum(treatment_status)) > num_perm) {
permutations <- sample_permute(length(treatment_status),
sum(treatment_status),
num_perm)
} else {
permutations <- true_permute(length(treatment_status),
sum(treatment_status))
}
# construct randomization distribution
random_distrib <- c()
for (i in 1:nrow(permutations)) {
potential_outcomes <- impute(sample, permutations[i,], tau)
random_distrib <- c(random_distrib, test(potential_outcomes,
permutations[i,]))
}
# get test statistic
test_stat <- test(impute(sample, treatment_status, tau), treatment_status)
# compute p value
num_greater <- 0
for (i in 1:length(random_distrib)) {
if (random_distrib[i] >= test_stat) {
num_greater <- num_greater + 1
}
}
num_greater / length(random_distrib)
}
fisher_impute_rando_dist <- function(sample, treatment_status, test, tau, num_perm = 100) {
if (choose(length(treatment_status), sum(treatment_status)) > num_perm) {
permutations <- sample_permute(length(treatment_status),
sum(treatment_status),
num_perm)
} else {
permutations <- true_permute(length(treatment_status),
sum(treatment_status))
}
# construct randomization distribution
random_distrib <- c()
for (i in 1:nrow(permutations)) {
potential_outcomes <- impute(sample, permutations[i,], tau)
random_distrib <- c(random_distrib, test(potential_outcomes,
permutations[i,]))
}
random_distrib
}
fisher_impute_actual_stat <- function(sample, treatment_status, test, tau, num_perm = 100) {
test(impute(sample, treatment_status, tau), treatment_status)
}
f_int <- function(sample, treat_assgn, lower_tau, upper_tau, increment, test,
tolerance = 300) {
null_hypotheses <- seq(lower_tau,upper_tau,by=increment)
res <- data.frame(matrix(ncol = 2, nrow = length(null_hypotheses)))
colnames(res) <- c("tau", "p_val")
j <- 1
for (tau in null_hypotheses) {
res[j,] <- c(tau, fisher_impute(sample, treat_assgn, test, tau, tolerance))
j <- j + 1
}
res
}
# pivotal distribution question (removed)
sample1 <- c(rnorm(35, 4), rnorm(20, 2))
treat1 <- c(rep(1,times = 35), rep(0,times = 20))
out <- f_int(sample1, treat1, -2, 8, 0.2, diff, tolerance = 300)
View(out)
sample1 <- c(rnorm(400, 4), rnorm(300, 0))
treat1 <- c(rep(1,times = 400), rep(0,times = 300))
out <- f_int(sample1, treat1, -2, 8, 0.2, t_stat, tolerance = 300)
library(tidyverse)
library(dplyr)
data <- read.csv("/Users/jasonross/Desktop/data.csv")
library(tidyverse)
library(dplyr)
data <- read.csv("/Users/jasonross/Desktop/data.csv")
View(data)
filter <- data[data$PIPELINE_NAME == "Northwest Pipeline LLC", ]
View(filter)
filter <- data[data$PIPELINE_NAME == "cat", ]
install.packages(datetimeutils)
library(tidyverse)
library(dplyr)
data <- read.csv("/Users/jasonross/Desktop/dates_columbia.csv")
View(data)
data <- excel_numeritc_to_date(as.numeric(as.character(data$x), date_system = "modern"))
library(tidyverse)
library(dplyr)
library(datetimeutils)
data <- read.csv("/Users/jasonross/Desktop/dates_columbia.csv")
excel_numeric_to_date(as.numeric(as.character(data$x), date_system = "modern"))
library(tidyverse)
library(dplyr)
library(datetimeutils)
data <- read.csv("/Users/jasonross/Desktop/dates_columbia.csv")
excel_numeric_to_date(as.numeric(as.character(data$x), date_system = "modern"))
library(datetimeutils)
convert_date(data$x, type = "Excel", fraction = true)
convert_date(data$x, type = "Excel", fraction = TRUE)
View(data)
data$x
convert_date(data$x, type = "Excel")
new_dates <- convert_date(data$x, type = "Excel")
new_dates
new_dates <- sort(convert_date(data$x, type = "Excel"))
new_dates
new_dates[25] - new_dates[24]
library(tidyverse)
library(dplyr)
library(datetimeutils)
data <- read.csv("/Users/jasonross/Desktop/dates_columbia.csv")
new_dates <- sort(convert_date(data$x, type = "Excel"))
find_max_diff <- function(dates) {
dates <- sort(convert_date(data$x, type = "Excel"))
max_diff <- 0
for (i in 1:(length(new_dates) - 1)) {
cur_diff <- new_dates[i+1] - new_dates[i]
if (cur_diff > max_diff) {
max_diff <- cur_diff
begin_max_diff <- dates[i]
}
}
c(begin_max_diff, max_diff)
}
find_max_diff(data)
library(tidyverse)
library(dplyr)
library(datetimeutils)
data <- read.csv("/Users/jasonross/Desktop/dates_columbia.csv")
new_dates <- sort(convert_date(data$x, type = "Excel"))
find_max_diff <- function(data) {
dates <- sort(convert_date(data$x, type = "Excel"))
max_diff <- 0
for (i in 1:(length(new_dates) - 1)) {
cur_diff <- new_dates[i+1] - new_dates[i]
if (cur_diff > max_diff) {
max_diff <- cur_diff
begin_max_diff <- dates[i]
}
}
c(begin_max_diff, max_diff)
}
find_max_diff(data)
library(tidyverse)
library(dplyr)
library(datetimeutils)
data <- read.csv("/Users/jasonross/Desktop/dates_columbia.csv")
new_dates <- sort(convert_date(data$x, type = "Excel"))
find_max_diff <- function(data) {
dates <- sort(convert_date(data$x, type = "Excel"))
max_diff <- 0
for (i in 1:(length(new_dates) - 1)) {
cur_diff <- new_dates[i+1] - new_dates[i]
if (cur_diff > max_diff) {
max_diff <- cur_diff
begin_max_diff <- dates[i]
}
}
begin_max_diff
}
find_max_diff(data)
library(tidyverse)
library(dplyr)
library(datetimeutils)
data <- read.csv("/Users/jasonross/Desktop/dates_columbia.csv")
new_dates <- sort(convert_date(data$x, type = "Excel"))
find_max_diff <- function(data) {
dates <- sort(convert_date(data$x, type = "Excel"))
max_diff <- 0
for (i in 1:(length(new_dates) - 1)) {
cur_diff <- new_dates[i+1] - new_dates[i]
if (cur_diff > max_diff) {
max_diff <- cur_diff
begin_max_diff <- dates[i]
}
}
res <- as.data.frame(matrix(nrow = 1, ncol = 2))
colname(res) <- c("max_date_diff_begin", "max_date_diff")
res[1,1] <- begin_max_diff
res[2,1] <- max_diff
res
}
find_max_diff(data)
library(tidyverse)
library(dplyr)
library(datetimeutils)
data <- read.csv("/Users/jasonross/Desktop/dates_columbia.csv")
new_dates <- sort(convert_date(data$x, type = "Excel"))
find_max_diff <- function(data) {
dates <- sort(convert_date(data$x, type = "Excel"))
max_diff <- 0
for (i in 1:(length(new_dates) - 1)) {
cur_diff <- new_dates[i+1] - new_dates[i]
if (cur_diff > max_diff) {
max_diff <- cur_diff
begin_max_diff <- dates[i]
}
}
res <- as.data.frame(matrix(nrow = 1, ncol = 2))
colnames(res) <- c("max_date_diff_begin", "max_date_diff")
res[1,1] <- begin_max_diff
res[2,1] <- max_diff
res
}
find_max_diff(data)
library(tidyverse)
library(dplyr)
library(datetimeutils)
data <- read.csv("/Users/jasonross/Desktop/dates_columbia.csv")
new_dates <- sort(convert_date(data$x, type = "Excel"))
find_max_diff <- function(data) {
dates <- sort(convert_date(data$x, type = "Excel"))
max_diff <- 0
for (i in 1:(length(new_dates) - 1)) {
cur_diff <- new_dates[i+1] - new_dates[i]
if (cur_diff > max_diff) {
max_diff <- cur_diff
begin_max_diff <- dates[i]
}
}
res <- as.data.frame(matrix(nrow = 1, ncol = 2))
colnames(res) <- c("max_date_diff_begin", "max_date_diff")
res[1,1] <- begin_max_diff
res[1,2] <- max_diff
res
}
find_max_diff(data)
data <- readxl::read_xls("/Users/jasonross/Desktop/test_data.csv.nosync.csv")
data <- readxl::read_xls("/Users/jasonross/Desktop/data.nosync/test_data.csv")
data <- readxl::read_xls("/Users/jasonross/Desktop/data.nosync/test_data.csv")
library(readxl)
data <- readxl::read_xls("/Users/jasonross/Desktop/data.nosync/test_data.csv")
data <- read.csv("/Users/jasonross/Desktop/data.nosync/test_data.csv")
View(data)
pipelines <- unique(data$PIPELINE_NAME)
pipelines
pipelines <- unique(data$PIPELINE_NAME)
library(readxl)
data <- as.data.frame(read.csv("/Users/jasonross/Desktop/data.nosync/test_data.csv"))
pipelines <- unique(data$PIPELINE_NAME)
data <- read.csv("/Users/jasonross/Desktop/data.nosync/test_data.csv")
View(data)
data <- read.csv("/Users/jasonross/Desktop/data.nosync/test_data.csv")
View(data)
data <- read.csv("/Users/jasonross/Desktop/data.nosync/test_data.csv")
View(data)
data <- read.csv("/Users/jasonross/Desktop/data.nosync/test_data.csv")
unique(data$PIPELINE_NAME)
help(sort)
as.Date(42705, origin = "1899-12-30")
as.Date(44561, origin = "1899-12-30")
as.Date(4301, origin = "1899-12-30")
as.Date(43101, origin = "1899-12-30")
setwd("/Users/jasonross/Desktop/Hortaçsu/Electricity-Project/Scrape #4/code")
files <- file.list()
setwd("/Users/jasonross/Desktop/Hortaçsu/Electricity-Project/Scrape #4/code")
files <- files.list()
files <- list.files()
